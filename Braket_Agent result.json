{"File_Information": {"Experiment_Title": "Braket", "Experiment_Method": "(3f_2r)", "Experiment_Date": "[2025-04-13(14h13m)]"}, "CAE_conditions": {"experimental_introduction": "\n- Establishment of an Experimental Planning Method for Analysis of Stress and Deformation according to the Shape of Basket Bracket\n- Conducting CAE Using PyMAPDL\n", "experimental_goals": "\n- examine the correlation between the design variables and response variables, and estimate the sensitivity of each design variable.\n", "parameters": "\n(1)design variable\n    a: 600 - 650mm\n    b = 200mm #fixed factor\n    c: 500 - 550mm\n    d = 200 #fixed factor\n    e: 100 - 120mm\n    \n(2)response variable\n    max stress, max displacement\n\n(3) constraints\n    Hole A = fiexd\n    Hole B = vertical tensile stress 1,000Pa. “A downward load is applied through the hole located at the bottom-right portion of the ㄱ‑shaped bracket.”\n"}, "Prompt_Result": {"gpt_raw_code": "### [Task 1]\n\n#### 1. Explanation of Objectives and Plan\n\n##### (1) Overview\nThe goal of this experiment is to analyze the correlation between design variables and response variables in a basket bracket's structure, specifically focusing on stress and deformation characteristics using an experimental planning approach. This involves conducting simulations through Computational Aided Engineering (CAE) using PyMAPDL to understand how variations in certain design variables affect maximum stress and displacement.\n\n##### (2) Purpose and Objective\nThe primary objective is to establish an experimental method for determining the sensitivity of specific design variables on the response variables, maximum stress and maximum displacement. The hypothesis is that specific dimensions of the basket bracket impact how it deforms and handles stress under applied loads. By understanding these relationships, more efficient and resilient designs can be created.\n\n##### (3) Plan for Implementation\n1. Define a range for each design variable (a, c, and e) while keeping some factors fixed (b and d) as stated in the constraints.\n2. Use PyMAPDL to carry out simulations for different combinations within the specified range.\n3. Collect response variable data for each configuration.\n4. Analyze the data to determine the sensitivity of each design variable relative to the response variables, forming an important ranking.\n\n#### 2. Sensitivity Estimation and Importance Ranking\n\nTo estimate the sensitivity and ranking of design variables, a series of simulations will be conducted to evaluate the changes in response variables (max stress and max displacement) concerning variations in the identified design variables (a, c, and e).\n\n**Importance Ranking:**\n- Given the linear dimensions:\n  - **a (600 - 650mm):** As it's the primary horizontal dimension influencing the support span, it is expected to have the highest impact on both stress and displacement.\n  - **c (500 - 550mm):** Being similar to 'a' in terms of boundary constraints, this slightly lesser length might contribute secondarily.\n  - **e (100 - 120mm):** A smaller factor likely influences local stress distribution but less significant overall compared to larger dimensions.\n\n**Engineering Insights:**\n- Stress and deformation at a fixed point under load can be estimated using equations for bending stress and deformation. For instance, the maximum bending stress σ can be calculated as:\n  \\[\n  \\sigma = \\frac{M \\cdot y}{I}\n  \\]\n  where M is the moment, y is the distance from the neutral axis, and I is the moment of inertia.\n- The displacement δ is derived using:\n  \\[\n  \\delta = \\frac{FL^3}{3EI}\n  \\]\n  here, F is the applied force, L is the length between supports, E is the modulus of elasticity, and I is already defined.\n\n### [Task 2] Generating Python Code\n\nThe Python function `experiment()` will simulate changes in the design variables to evaluate results from PyMAPDL_processing, focusing on both max stress and max displacement.\n\n```python\ndef experiment():\n    # Define ranges based on input conditions\n    a_values = range(600, 651, 10)  # Increment by 10\n    c_values = range(500, 551, 10)\n    e_values = range(100, 121, 5)\n    \n    # Fixed values\n    b = 200  # Fixed factor\n    d = 200  # Fixed factor\n    \n    # Store results\n    results = []\n\n    # Conducting experimental simulations\n    for a in a_values:\n        for c in c_values:\n            for e in e_values:\n                # Execute PyMAPDL processing\n                max_stress, max_displacement = PyMAPDL_processing(a, b, c, d, e)\n                \n                # Append result tuple (variables and responses)\n                results.append((a, b, c, d, e, max_stress, max_displacement))\n    \n    # Return the collected results\n    return results\n\n# Execute the function to perform the experiments\nexperiment_results = experiment()\n\n# Returning all results for inspection\nexperiment_results\n```\n\nThe above code defines a systematic exploration of the design space, varying `a`, `c`, and `e` while keeping `b` and `d` constants. It uses nested loops over specified ranges to evaluate the resulting stress and displacement, collating this information for analysis.", "result_analysis": "Certainly! Below is a Python function named `graph()` that visualizes the results of the sensitivity analysis by plotting the response variables (maximum stress and displacement) against the design variables.\n\n### Task 2: Create the `graph()` Function to Visualize the Results\n\nTo effectively understand and communicate the sensitivity of design variables, I will outline a Python function `graph()` that produces plots for each design variable against the response variables. This will help in visualizing the effects of design variable adjustments on maximum stress and displacement.\n\n```python\nimport matplotlib.pyplot as plt\n\ndef graph(analysis_result):\n    # analysis_result is expected to be a list of tuples with structure:\n    # [(a, b, c, d, e, max_stress, max_displacement), ...]\n\n    # Define lists to collect results based on design variables\n    a_values = set()\n    c_values = set()\n    e_values = set()\n\n    # Dictionaries to store aggregated results for plotting\n    stress_for_a = {}\n    displacement_for_a = {}\n    stress_for_c = {}\n    displacement_for_c = {}\n    stress_for_e = {}\n    displacement_for_e = {}\n\n    # Populate the unique sets and dictionaries\n    for (a, b, c, d, e, max_stress, max_displacement) in analysis_result:\n        a_values.add(a)\n        c_values.add(c)\n        e_values.add(e)\n        \n        if a not in stress_for_a:\n            stress_for_a[a] = []\n            displacement_for_a[a] = []\n        if c not in stress_for_c:\n            stress_for_c[c] = []\n            displacement_for_c[c] = []\n        if e not in stress_for_e:\n            stress_for_e[e] = []\n            displacement_for_e[e] = []\n        \n        stress_for_a[a].append(max_stress)\n        displacement_for_a[a].append(max_displacement)\n        stress_for_c[c].append(max_stress)\n        displacement_for_c[c].append(max_displacement)\n        stress_for_e[e].append(max_stress)\n        displacement_for_e[e].append(max_displacement)\n\n    # Plot stress and displacement against each design variable\n    fig, axes = plt.subplots(3, 2, figsize=(14, 18))\n    fig.suptitle('Sensitivity Analysis of Design Variables')\n\n    # Plot for 'a' variable\n    axes[0, 0].boxplot([stress_for_a[k] for k in sorted(a_values)], labels=sorted(a_values))\n    axes[0, 0].set_title('Maximum Stress vs a')\n    axes[0, 0].set_xlabel('a (mm)')\n    axes[0, 0].set_ylabel('Max Stress (Pa)')\n\n    axes[0, 1].boxplot([displacement_for_a[k] for k in sorted(a_values)], labels=sorted(a_values))\n    axes[0, 1].set_title('Maximum Displacement vs a')\n    axes[0, 1].set_xlabel('a (mm)')\n    axes[0, 1].set_ylabel('Max Displacement (m)')\n\n    # Plot for 'c' variable\n    axes[1, 0].boxplot([stress_for_c[k] for k in sorted(c_values)], labels=sorted(c_values))\n    axes[1, 0].set_title('Maximum Stress vs c')\n    axes[1, 0].set_xlabel('c (mm)')\n    axes[1, 0].set_ylabel('Max Stress (Pa)')\n    \n    axes[1, 1].boxplot([displacement_for_c[k] for k in sorted(c_values)], labels=sorted(c_values))\n    axes[1, 1].set_title('Maximum Displacement vs c')\n    axes[1, 1].set_xlabel('c (mm)')\n    axes[1, 1].set_ylabel('Max Displacement (m)')\n\n    # Plot for 'e' variable\n    axes[2, 0].boxplot([stress_for_e[k] for k in sorted(e_values)], labels=sorted(e_values))\n    axes[2, 0].set_title('Maximum Stress vs e')\n    axes[2, 0].set_xlabel('e (mm)')\n    axes[2, 0].set_ylabel('Max Stress (Pa)')\n    \n    axes[2, 1].boxplot([displacement_for_e[k] for k in sorted(e_values)], labels=sorted(e_values))\n    axes[2, 1].set_title('Maximum Displacement vs e')\n    axes[2, 1].set_xlabel('e (mm)')\n    axes[2, 1].set_ylabel('Max Displacement (m)')\n\n    plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n    plt.show()\n\n# Example call with the experiment_results variable (assuming it holds your data)\ngraph(experiment_results)\n```\n\n### Explanation\n\n- **Data Aggregation:** The code first aggregates the data in dictionaries categorized by each design variable (`a`, `c`, `e`).\n- **Box Plots:** This visualization is chosen because it effectively summarizes the variation and central tendency of `max_stress` and `max_displacement` relative to each design variable.\n- **Subplots:** Three rows of subplots for the three variables (“a”, “c”, and “e”) depict their effect on stress and displacement, allowing easy comparison across dimensions.\n\nBy using this visualization strategy, one can readily observe which design variable has the most pronounced impact on the stress and displacement responses.", "graph_code": "import matplotlib.pyplot as plt\n\ndef graph(analysis_result):\n    # analysis_result is expected to be a list of tuples with structure:\n    # [(a, b, c, d, e, max_stress, max_displacement), ...]\n\n    # Define lists to collect results based on design variables\n    a_values = set()\n    c_values = set()\n    e_values = set()\n\n    # Dictionaries to store aggregated results for plotting\n    stress_for_a = {}\n    displacement_for_a = {}\n    stress_for_c = {}\n    displacement_for_c = {}\n    stress_for_e = {}\n    displacement_for_e = {}\n\n    # Populate the unique sets and dictionaries\n    for (a, b, c, d, e, max_stress, max_displacement) in analysis_result:\n        a_values.add(a)\n        c_values.add(c)\n        e_values.add(e)\n        \n        if a not in stress_for_a:\n            stress_for_a[a] = []\n            displacement_for_a[a] = []\n        if c not in stress_for_c:\n            stress_for_c[c] = []\n            displacement_for_c[c] = []\n        if e not in stress_for_e:\n            stress_for_e[e] = []\n            displacement_for_e[e] = []\n        \n        stress_for_a[a].append(max_stress)\n        displacement_for_a[a].append(max_displacement)\n        stress_for_c[c].append(max_stress)\n        displacement_for_c[c].append(max_displacement)\n        stress_for_e[e].append(max_stress)\n        displacement_for_e[e].append(max_displacement)\n\n    # Plot stress and displacement against each design variable\n    fig, axes = plt.subplots(3, 2, figsize=(14, 18))\n    fig.suptitle('Sensitivity Analysis of Design Variables')\n\n    # Plot for 'a' variable\n    axes[0, 0].boxplot([stress_for_a[k] for k in sorted(a_values)], labels=sorted(a_values))\n    axes[0, 0].set_title('Maximum Stress vs a')\n    axes[0, 0].set_xlabel('a (mm)')\n    axes[0, 0].set_ylabel('Max Stress (Pa)')\n\n    axes[0, 1].boxplot([displacement_for_a[k] for k in sorted(a_values)], labels=sorted(a_values))\n    axes[0, 1].set_title('Maximum Displacement vs a')\n    axes[0, 1].set_xlabel('a (mm)')\n    axes[0, 1].set_ylabel('Max Displacement (m)')\n\n    # Plot for 'c' variable\n    axes[1, 0].boxplot([stress_for_c[k] for k in sorted(c_values)], labels=sorted(c_values))\n    axes[1, 0].set_title('Maximum Stress vs c')\n    axes[1, 0].set_xlabel('c (mm)')\n    axes[1, 0].set_ylabel('Max Stress (Pa)')\n    \n    axes[1, 1].boxplot([displacement_for_c[k] for k in sorted(c_values)], labels=sorted(c_values))\n    axes[1, 1].set_title('Maximum Displacement vs c')\n    axes[1, 1].set_xlabel('c (mm)')\n    axes[1, 1].set_ylabel('Max Displacement (m)')\n\n    # Plot for 'e' variable\n    axes[2, 0].boxplot([stress_for_e[k] for k in sorted(e_values)], labels=sorted(e_values))\n    axes[2, 0].set_title('Maximum Stress vs e')\n    axes[2, 0].set_xlabel('e (mm)')\n    axes[2, 0].set_ylabel('Max Stress (Pa)')\n    \n    axes[2, 1].boxplot([displacement_for_e[k] for k in sorted(e_values)], labels=sorted(e_values))\n    axes[2, 1].set_title('Maximum Displacement vs e')\n    axes[2, 1].set_xlabel('e (mm)')\n    axes[2, 1].set_ylabel('Max Displacement (m)')\n\n    plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n    plt.show()\n\n# Example call with the experiment_results variable (assuming it holds your data)\ngraph(experiment_results)"}, "result_data": {"analysis_result": [[600, 200, 500, 200, 100, 572.3105945741054, 7.275866502020909e-06], [600, 200, 500, 200, 105, 573.3485723416006, 7.290586517474284e-06], [600, 200, 500, 200, 110, 574.3561367360729, 7.306136537614224e-06], [600, 200, 500, 200, 115, 575.3126901979006, 7.322589885748857e-06], [600, 200, 500, 200, 120, 566.5810432518149, 6.876084777440687e-06], [600, 200, 510, 200, 100, 574.6620388389806, 7.43147540891673e-06], [600, 200, 510, 200, 105, 575.7165917146173, 7.443472819945569e-06], [600, 200, 510, 200, 110, 576.7047423206029, 7.456036575591883e-06], [600, 200, 510, 200, 115, 577.593611964345, 7.4688688377738376e-06], [600, 200, 510, 200, 120, 568.2662292634325, 7.000207948443665e-06], [600, 200, 520, 200, 100, 574.6619223674885, 7.553136016484854e-06], [600, 200, 520, 200, 105, 575.7164279627386, 7.565133214853807e-06], [600, 200, 520, 200, 110, 576.7044803821359, 7.577697154969328e-06], [600, 200, 520, 200, 115, 577.5932899183744, 7.59053009759308e-06], [600, 200, 520, 200, 120, 568.268412736844, 7.121965484067693e-06], [600, 200, 530, 200, 100, 574.6618058960327, 7.67479627574221e-06], [600, 200, 530, 200, 105, 575.7162246916472, 7.68679317389323e-06], [600, 200, 530, 200, 110, 576.7042184438111, 7.699357188296681e-06], [600, 200, 530, 200, 115, 577.5929283918845, 7.712190701556346e-06], [600, 200, 530, 200, 120, 568.2705261502499, 7.243718483585099e-06], [600, 200, 540, 200, 100, 574.6617002163937, 7.79645637461056e-06], [600, 200, 540, 200, 105, 575.7160517123688, 7.808452921516937e-06], [600, 200, 540, 200, 110, 576.7039968336668, 7.821016940460211e-06], [600, 200, 540, 200, 115, 577.5926163407621, 7.833850952773406e-06], [600, 200, 540, 200, 120, 567.1513479038737, 7.378140586688408e-06], [600, 200, 550, 200, 100, 574.6615449861424, 7.918116469885588e-06], [600, 200, 550, 200, 105, 575.7158492278708, 7.930112645177134e-06], [600, 200, 550, 200, 110, 576.7037348956138, 7.942676633081238e-06], [600, 200, 550, 200, 115, 577.5922942954505, 7.955511105237164e-06], [600, 200, 550, 200, 120, 567.1494704230804, 7.499862477139108e-06], [610, 200, 500, 200, 100, 571.839111060841, 7.2621167827482685e-06], [610, 200, 500, 200, 105, 571.9166028494283, 7.27507971509787e-06], [610, 200, 500, 200, 110, 573.0334898495923, 7.2894532172363004e-06], [610, 200, 500, 200, 115, 574.0652982610088, 7.304249106255402e-06], [610, 200, 500, 200, 120, 567.3705185234492, 6.853020703514205e-06], [610, 200, 510, 200, 100, 574.6703217290523, 7.421383088711948e-06], [610, 200, 510, 200, 105, 574.4187835666446, 7.432526192025411e-06], [610, 200, 510, 200, 110, 575.5077271806516, 7.44406283003774e-06], [610, 200, 510, 200, 115, 576.5550027552835, 7.456220961078797e-06], [610, 200, 510, 200, 120, 569.2297723184067, 6.9785585714942625e-06], [610, 200, 520, 200, 100, 574.6702691935674, 7.543042778280058e-06], [610, 200, 520, 200, 105, 574.4186790376702, 7.554185422690022e-06], [610, 200, 520, 200, 110, 575.5075663485803, 7.565721928467872e-06], [610, 200, 520, 200, 115, 576.5547439693105, 7.577880270135833e-06], [610, 200, 520, 200, 120, 569.2318753256292, 7.100324186639936e-06], [610, 200, 530, 200, 100, 574.6702259176844, 7.664702122988545e-06], [610, 200, 530, 200, 105, 574.418564493875, 7.675844222022769e-06], [610, 200, 530, 200, 110, 575.507405516573, 7.68738049896853e-06], [610, 200, 530, 200, 115, 576.5544959417119, 7.699538928461235e-06], [610, 200, 530, 200, 120, 569.2339352327741, 7.2220845317862776e-06], [610, 200, 540, 200, 100, 574.6701826418067, 7.786361307950196e-06], [610, 200, 540, 200, 105, 574.4184506820849, 7.797502811804063e-06], [610, 200, 540, 200, 110, 575.50724468463, 7.809038801572577e-06], [610, 200, 540, 200, 115, 576.5542775401613, 7.821197239431468e-06], [610, 200, 540, 200, 120, 568.0610991924326, 7.358035258800092e-06], [610, 200, 550, 200, 100, 574.6701393659341, 7.908020487830712e-06], [610, 200, 550, 200, 105, 574.4183468851822, 7.919161377451185e-06], [610, 200, 550, 200, 110, 575.5070846146747, 7.930697053828736e-06], [610, 200, 550, 200, 115, 576.5540591387163, 7.942855457309892e-06], [610, 200, 550, 200, 120, 568.0589682781649, 7.479760848322207e-06], [620, 200, 500, 200, 100, 574.0321783928063, 7.273019948496721e-06], [620, 200, 500, 200, 105, 571.3532861511321, 7.262481635224771e-06], [620, 200, 500, 200, 110, 571.5033610657574, 7.274890905874653e-06], [620, 200, 500, 200, 115, 572.6237155579116, 7.288486332423842e-06], [620, 200, 500, 200, 120, 567.7459779679251, 6.831550160704779e-06], [620, 200, 510, 200, 100, 575.0990324580615, 7.4124205333661e-06], [620, 200, 510, 200, 105, 574.313745967699, 7.422694504957832e-06], [620, 200, 510, 200, 110, 574.0743978947129, 7.433551740020674e-06], [620, 200, 510, 200, 115, 575.2175742530969, 7.444708533149137e-06], [620, 200, 510, 200, 120, 569.7678651186233, 6.9586696251175955e-06], [620, 200, 520, 200, 100, 575.0989799384803, 7.534079504296109e-06], [620, 200, 520, 200, 105, 574.313694206663, 7.5443528506185585e-06], [620, 200, 520, 200, 110, 574.0743355124375, 7.555209673288916e-06], [620, 200, 520, 200, 115, 575.2174162001511, 7.5663663473925075e-06], [620, 200, 520, 200, 120, 569.7698466083024, 7.080443998718349e-06], [620, 200, 530, 200, 100, 575.0989380714389, 7.655738129096313e-06], [620, 200, 530, 200, 105, 574.3136517151067, 7.666010766133764e-06], [620, 200, 530, 200, 110, 574.0742228054327, 7.67686707208657e-06], [620, 200, 530, 200, 115, 575.2172581472585, 7.688023520021925e-06], [620, 200, 530, 200, 120, 569.7717843519624, 7.2022123372355535e-06], [620, 200, 540, 200, 100, 575.0988954864206, 7.777396590324239e-06], [620, 200, 540, 200, 105, 574.3136092235551, 7.787668470032026e-06], [620, 200, 540, 200, 110, 574.074120808977, 7.798524195617308e-06], [620, 200, 540, 200, 115, 575.2171397365664, 7.80968035102342e-06], [620, 200, 540, 200, 120, 568.5539020562576, 7.339337747252828e-06], [620, 200, 550, 200, 100, 575.0988521834265, 7.899055040783554e-06], [620, 200, 550, 200, 105, 574.3135660199372, 7.909326145245835e-06], [620, 200, 550, 200, 110, 574.0740484255085, 7.920181261042712e-06], [620, 200, 550, 200, 115, 575.2169824219394, 7.931337091884045e-06], [620, 200, 550, 200, 120, 568.5515327667453, 7.4610659260566876e-06], [630, 200, 500, 200, 100, 574.3875792421777, 7.26473989202583e-06], [630, 200, 500, 200, 105, 573.6015719552258, 7.273793643529383e-06], [630, 200, 500, 200, 110, 573.3830242221229, 7.286494127373601e-06], [630, 200, 500, 200, 115, 571.0356113199796, 7.275302168128685e-06], [630, 200, 500, 200, 120, 567.7364726118644, 6.811773074661659e-06], [630, 200, 510, 200, 100, 575.359942765251, 7.404046868082311e-06], [630, 200, 510, 200, 105, 574.6461275641173, 7.414089399696193e-06], [630, 200, 510, 200, 110, 573.8866172629787, 7.423980677410721e-06], [630, 200, 510, 200, 115, 573.6876346078438, 7.434522930023181e-06], [630, 200, 510, 200, 120, 569.9087027989239, 6.940625517766266e-06], [630, 200, 520, 200, 100, 575.3599008558622, 7.525705368638035e-06], [630, 200, 520, 200, 105, 574.6460857353785, 7.535746935109289e-06], [630, 200, 520, 200, 110, 573.8866158832477, 7.545637714443035e-06], [630, 200, 520, 200, 115, 573.6875236410261, 7.556179476593121e-06], [630, 200, 520, 200, 120, 569.9105731857444, 7.062409426418891e-06], [630, 200, 530, 200, 100, 575.3598589464774, 7.647363539451577e-06], [630, 200, 530, 200, 105, 574.6460439066439, 7.657404035479403e-06], [630, 200, 530, 200, 110, 573.8865634749372, 7.667294219742351e-06], [630, 200, 530, 200, 115, 573.6874630019444, 7.677835378168065e-06], [630, 200, 530, 200, 120, 569.912379118207, 7.184186511314881e-06], [630, 200, 540, 200, 100, 575.3598170370966, 7.769021555050545e-06], [630, 200, 540, 200, 105, 574.6460013824609, 7.77906091770391e-06], [630, 200, 540, 200, 110, 573.8864820576221, 7.788950448332002e-06], [630, 200, 540, 200, 115, 573.6874023628807, 7.799490933294591e-06], [630, 200, 540, 200, 120, 568.6572417685865, 7.32207833243978e-06], [630, 200, 550, 200, 100, 575.3597744270332, 7.890679561621e-06], [630, 200, 550, 200, 105, 574.6459588582824, 7.900717763644583e-06], [630, 200, 550, 200, 110, 573.886439624308, 7.91060661409787e-06], [630, 200, 550, 200, 115, 573.6873424112563, 7.921146392481808e-06], [630, 200, 550, 200, 120, 568.6546260885597, 7.443807947202503e-06], [640, 200, 500, 200, 100, 574.6159336476576, 7.257214136834156e-06], [640, 200, 500, 200, 105, 573.8669761721552, 7.265669685805284e-06], [640, 200, 500, 200, 110, 573.1077223991772, 7.27455604616519e-06], [640, 200, 500, 200, 115, 572.8652122574767, 7.287654240581284e-06], [640, 200, 500, 200, 120, 567.3754245819571, 6.793786646863474e-06], [640, 200, 510, 200, 100, 575.5360025597902, 7.397221601752944e-06], [640, 200, 510, 200, 105, 574.8496957994602, 7.4063371871564555e-06], [640, 200, 510, 200, 110, 574.117444237547, 7.415406434440428e-06], [640, 200, 510, 200, 115, 573.3967387378622, 7.4252406341394075e-06], [640, 200, 510, 200, 120, 568.4100745502539, 6.941128118572263e-06], [640, 200, 520, 200, 100, 575.535961303034, 7.518879731439818e-06], [640, 200, 520, 200, 105, 574.8496539364781, 7.527994291350453e-06], [640, 200, 520, 200, 110, 574.1174031303057, 7.537062792676317e-06], [640, 200, 520, 200, 115, 573.3966970390018, 7.546896424208532e-06], [640, 200, 520, 200, 120, 568.4071401521802, 7.062845036611686e-06], [640, 200, 530, 200, 100, 575.5359193626176, 7.640537510828022e-06], [640, 200, 530, 200, 105, 574.8496021879212, 7.649650947087554e-06], [640, 200, 530, 200, 110, 574.1173613495176, 7.658718621007122e-06], [640, 200, 530, 200, 115, 573.3966957022807, 7.668551562815496e-06], [640, 200, 530, 200, 120, 568.4054969550841, 7.184568532922066e-06], [640, 200, 540, 200, 100, 575.5358774222054, 7.762195115030138e-06], [640, 200, 540, 200, 105, 574.8495603249452, 7.771307369328625e-06], [640, 200, 540, 200, 110, 574.1173195687337, 7.780374169586025e-06], [640, 200, 540, 200, 115, 573.3966143096534, 7.790206344598417e-06], [640, 200, 540, 200, 120, 568.4034437099687, 7.306285037804423e-06], [640, 200, 550, 200, 100, 575.5358354817971, 7.88385269119695e-06], [640, 200, 550, 200, 105, 574.849517783202, 7.892963738736838e-06], [640, 200, 550, 200, 110, 574.1172777879539, 7.902029648452301e-06], [640, 200, 550, 200, 115, 573.3965619681343, 7.911861017141654e-06], [640, 200, 550, 200, 120, 568.4006453170197, 7.428014920123042e-06], [650, 200, 500, 200, 100, 574.73960787697, 7.250790836556415e-06], [650, 200, 500, 200, 105, 574.0236472698823, 7.258334844962832e-06], [650, 200, 500, 200, 110, 573.2940918659114, 7.2665493365491595e-06], [650, 200, 500, 200, 115, 572.5677377578764, 7.2753200992440274e-06], [650, 200, 500, 200, 120, 566.6983950271936, 6.777685341317652e-06], [650, 200, 510, 200, 100, 575.572889540935, 7.3907379048590385e-06], [650, 200, 510, 200, 105, 574.9385501682851, 7.399530412092783e-06], [650, 200, 510, 200, 110, 574.2687298648899, 7.4083364954456975e-06], [650, 200, 510, 200, 115, 573.5496146597056, 7.416957412055926e-06], [650, 200, 510, 200, 120, 567.8341700541863, 6.926831742208074e-06], [650, 200, 520, 200, 100, 575.5728482516303, 7.512395849340274e-06], [650, 200, 520, 200, 105, 574.9385082846931, 7.521187101365703e-06], [650, 200, 520, 200, 110, 574.2686887148109, 7.529992149545838e-06], [650, 200, 520, 200, 115, 573.5495735856331, 7.538612520660685e-06], [650, 200, 520, 200, 120, 567.8310465094777, 7.048547705394318e-06], [650, 200, 530, 200, 100, 575.5728062957647, 7.634053445997616e-06], [650, 200, 530, 200, 105, 574.9384664011051, 7.642843330881722e-06], [650, 200, 530, 200, 110, 574.2686469072463, 7.651647237305511e-06], [650, 200, 530, 200, 115, 573.5495325115642, 7.66026697587731e-06], [650, 200, 530, 200, 120, 567.8292883600024, 7.170269056007055e-06], [650, 200, 540, 200, 100, 575.5727643399033, 7.755710864240738e-06], [650, 200, 540, 200, 105, 574.9383846204043, 7.764499313689515e-06], [650, 200, 540, 200, 110, 574.2686050996857, 7.773302013612517e-06], [650, 200, 540, 200, 115, 573.5494907850255, 7.781921067661629e-06], [650, 200, 540, 200, 120, 567.8270830618803, 7.291983367942167e-06], [650, 200, 550, 200, 100, 575.5727223840461, 7.877368246694337e-06], [650, 200, 550, 200, 105, 574.9383427368281, 7.886155229217649e-06], [650, 200, 550, 200, 110, 574.2685632921293, 7.894956693078395e-06], [650, 200, 550, 200, 115, 573.5494490584908, 7.903575039951944e-06], [650, 200, 550, 200, 120, 567.8240951325284, 7.4137123214450235e-06]]}}